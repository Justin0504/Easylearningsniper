// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  communities   Community[] @relation("CommunityMembers")
  ownedCommunities Community[] @relation("CommunityOwner")
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  aiSummaries   AISummary[]
  notebooks     Notebook[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Community {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String

  owner     User      @relation("CommunityOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members   User[]    @relation("CommunityMembers")
  posts     Post[]
  aiSummaries AISummary[]
  topics    Topic[]
  notebooks Notebook[]
}

model Topic {
  id           String   @id @default(cuid())
  name         String
  description  String?
  communityId  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  posts     Post[]
}

model Post {
  id          String      @id @default(cuid())
  title       String
  content     String?
  type        PostType
  fileUrl     String?
  fileName    String?
  fileType    String?
  fileSize    Int?
  communityId String
  topicId     String?
  authorId    String
  isAIGenerated Boolean   @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  community  Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  topic      Topic?    @relation(fields: [topicId], references: [id])
  comments   Comment[]
  likes      Like[]
  categories PostCategory[]
}

model PostCategory {
  id       String @id @default(cuid())
  postId   String
  category String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, category])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id       String @id @default(cuid())
  postId   String
  userId   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model AISummary {
  id          String   @id @default(cuid())
  content     String
  communityId String
  authorId    String
  date        DateTime @default(now())
  createdAt   DateTime @default(now())

  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notebook {
  id          String   @id @default(cuid())
  title       String
  description String?
  emoji       String?  @default("ðŸ“š")
  communityId String
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  community Community        @relation(fields: [communityId], references: [id], onDelete: Cascade)
  author    User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  sources   NotebookSource[]
}

model NotebookSource {
  id         String   @id @default(cuid())
  name       String
  type       String   // PDF, Website, YouTube, etc.
  sourceType String   // file, url, youtube
  url        String?  // for website and youtube sources
  fileData   String?  @db.Text // base64 encoded file data
  fileSize   Int?     // file size in bytes
  notebookId String
  createdAt  DateTime @default(now())

  notebook Notebook @relation(fields: [notebookId], references: [id], onDelete: Cascade)
}

enum PostType {
  TEXT
  VIDEO
  PDF
  SLIDES
  VOICE_NOTE
  IMAGE
}
